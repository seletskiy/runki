/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fields?: string[];
        tags?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fields" in data && data.fields != undefined) {
                this.fields = data.fields;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
        }
    }
    get fields() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set fields(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set tags(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        fields?: string[];
        tags?: string;
    }): Message {
        const message = new Message({});
        if (data.fields != null) {
            message.fields = data.fields;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        return message;
    }
    toObject() {
        const data: {
            fields?: string[];
            tags?: string;
        } = {};
        if (this.fields != null) {
            data.fields = this.fields;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fields.length)
            writer.writeRepeatedString(1, this.fields);
        if (this.tags.length)
            writer.writeString(2, this.tags);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                case 2:
                    message.tags = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
